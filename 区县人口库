package com.svail.population_mobility;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;

import com.svail.gridprocess.DataPoint;
import com.svail.gridprocess.Price;
import com.svail.population_mobility.CountyPopulation;
import com.svail.util.FileTool;
import com.svail.util.Tool;

public class PopulationStatistics {
	public static String code;
	public static String countyname;
	public static String countyLN;
	public static String countyLA;
	public static String countyCoor;

	public static void main(String[] args) throws IOException {
		SearchCode();
		// Count();
		
		/*
		 Scanner input = new Scanner(System.in);  
		 System.out.println("请输入一个字符串:");
	     String string = input.nextLine();
	     
	     System.out.println("请输入一个您想查询的子字符串:");
	     String str = input.nextLine();
	     subCounter(string, str);
	     */
		//countStr("210702,211102,210702,440304,210702,210702,210711");

	}
	/**
	 * 统计某个区县流向各个地区的人数
	 * @param line 流出去的区县的行政代码集合
	 * @param code 该县的行政代码
	 */
	public static void countFlowout(String line,String code){
		String[] Code=line.split(",");
		Map<String, Integer> map = new HashMap<String, Integer>();
        for (String i : Code) {
            if(map.get(i)!=null){
                map.put(i, map.get(i)+1);
            }else{
                map.put(i, 1);
            }
        }
        for(Entry<String, Integer> entry :map.entrySet()){
            if(entry.getValue()>0){
                System.out.println("字符串："+entry.getKey()+";次数:"+entry.getValue());
                String str="<from>"+code+"</from>"+"<to>"+entry.getKey()+"</to>"+"<amount>"+entry.getValue()+"</amount>";
                System.out.println(str);
            }
        }
	}
	/**
	 * 统计流入该县的人口主要来自于哪些地区
	 * @param line 流入该县的人口来源地的行政区划代码集合
	 * @param code 该区县的行政代码
	 */
	public static void countFlowin(String line,String code){
		String[] Code=line.split(",");
		Map<String, Integer> map = new HashMap<String, Integer>();
        for (String i : Code) {
            if(map.get(i)!=null){
                map.put(i, map.get(i)+1);
            }else{
                map.put(i, 1);
            }
        }
        for(Entry<String, Integer> entry :map.entrySet()){
            if(entry.getValue()>0){
                System.out.println("字符串："+entry.getKey()+";次数:"+entry.getValue());
                String str="<from>"+entry.getKey()+"</from>"+"<to>"+code+"</to>"+"<amount>"+entry.getValue()+"</amount>";
                System.out.println(str);
            }
        }
	}
	/*
	 * 统计某个字符串的个数
	 */
	public static void subCounter(String str1, String str2) {
		 
        int counter = 0;
        for (int i = 0; i <= str1.length() - str2.length(); i++) {
            if (str1.substring(i, i + str2.length()).equalsIgnoreCase(str2)) {
                counter++;
            }
        }
        System.out.println("子字符串的个数为： " + counter);
 
    }
	/*
	 * 统计某个字符的个数
	 */
	public static void Count(){
		  
		  Scanner input = new Scanner(System.in);  
		  System.out.println("请输入一段字符：");  
		  String str = input.nextLine();  
		    
		  Map<Character,Integer> oos = new TreeMap<Character,Integer>();  
		  for(int i=0;i<str.length();i++){  
		       char ch = str.charAt(i);  
		        if(!oos.containsKey(ch)) {  
		    
		             oos.put(ch, 1);                      
		      }else{  
		          int auto =oos.get(ch)+1;             
		          oos.put(ch, auto);  
		          }  
		  }    
		       Iterator<Character> ois = oos.keySet().iterator();           
		  while(ois.hasNext()){             
		        char temp = ois.next();            
		          System.out.println(temp+"="+oos.get(temp));  
		  }  
	}

	/**
	 * 查询某个区县的人口情况
	 * 
	 * @throws IOException
	 */
	public static void SearchCode() throws IOException {

		System.out.println("将区县数据存到CountyPopulation中：");
		setCounty("D:/zhouxiang/人口数据/宾馆数据/人口统计/CodeResult .txt");
		
		System.out.println("将人口数据存到区县中：");
		ClassifyStatistic("D:/人口数据/1-postCode.txt");
		System.out.println("OK!");

		// 从CountyPopulation中查询所需要的数据
		System.out.println("输入所要查询的区县的行政代码：");
		Scanner input = new Scanner(System.in);
		String code = input.next();
		
		for (int i = 0; i < county.size(); i++) {
			if (county.get(i).code.equals(code)) {
				//查询该地区的户籍人口
				System.out.println("该地区的户籍人口：");
				for (int k = 0; k < county.get(i).homepois.size(); k++) {

					String homeStr=county.get(i).homepois.get(k);
					System.out.println(homeStr);
					
				}
                System.out.println(county.get(i).getpostCodes());
                String postCodes=county.get(i).getpostCodes().toString().replace(", ", ",").replace("[", "").replace("]", "");
                countFlowout(postCodes,county.get(i).code);
                
                //查询拥有该地区通讯地址的人口
				System.out.println("拥有该地区通讯地址的人口：");
				for (int k = 0; k < county.get(i).postpois.size(); k++) {

					System.out.println(county.get(i).postpois.get(k));

				}
				System.out.println(county.get(i).gethomeCodes());
				String homeCodes=county.get(i).gethomeCodes().toString().replace(", ", ",").replace("[", "").replace("]", "");
				countFlowin(homeCodes,county.get(i).code);

			}
		}

	}

	/**
	 * 将每个区县定义成一个county
	 */
	public static ArrayList<CountyPopulation> county = new ArrayList<CountyPopulation>();

	/**
	 * 对每个county进行数据的填充
	 */
	public static void addCountyPopulation(CountyPopulation cp) {
		county.add(cp);

	}
    public static void setCounty(String folder){
    
    	try {	
    	// 设置每个区县的区县代码、区县名字以及坐标
    		File file = new File(folder);
    		FileInputStream fis;
			fis = new FileInputStream(file);
		
    		InputStreamReader isr = new InputStreamReader(fis, "UTF-8");
    		BufferedReader reader = null;
    		String tempString = null;

    		reader = new BufferedReader(isr);
    		while ((tempString = reader.readLine()) != null) {
    			code = Tool.getStrByKey(tempString, "<Code>", "</Code>", "</Code>");
    			countyname = Tool.getStrByKey(tempString, "<CodeAddr>", "</CodeAddr>", "</CodeAddr>");
    			countyCoor = Tool.getStrByKey(tempString, "<CodeCoor>", "</CodeCoor>", "</CodeCoor>");
    			String[] coor = countyCoor.split(";");
    			countyLN = coor[0];
    			countyLA = coor[1];
    			CountyPopulation cp = new CountyPopulation();
    			cp.setCode(code);
    			cp.setCountyname(countyname);
    			double l = Double.parseDouble(countyLN);
    			cp.setLongitude(l);
    			cp.setLatitude(Double.parseDouble(countyLA));
    			addCountyPopulation(cp);
    		}
    		reader.close();
    	} catch (FileNotFoundException e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();
 			} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    }
	/**
	 * 分区县统计每个区县的人口记录
	 * 
	 * @param folder
	 * @throws IOException
	 */
	public static void ClassifyStatistic(String folder) throws IOException {
		// 将人口的户籍地址的代码分配到各个区县
		File file1 = new File(folder);

		FileInputStream fis1 = new FileInputStream(file1);
		InputStreamReader isr1 = new InputStreamReader(fis1, "UTF-8");
		BufferedReader reader1 = null;
		String tempString1 = null;

		reader1 = new BufferedReader(isr1);
		while ((tempString1 = reader1.readLine()) != null) {

			String admincode = Tool.getStrByKey(tempString1, "<Code>", "</Code>", "</Code>");
			String postcode = Tool.getStrByKey(tempString1, "<PostCode>", "</PostCode>", "</PostCode>");
			for (int i = 0; i < county.size(); i++) {
				String Code = county.get(i).code;
				if (admincode.equals(Code)) {
					county.get(i).sethomePois(tempString1);
					county.get(i).setpostCodes(postcode);
					break;
				}
			}
			for (int i = 0; i < county.size(); i++) {
				String Code = county.get(i).code;
				if (postcode.equals(Code)) {
					county.get(i).setpostPois(tempString1);
					county.get(i).sethomeCodes(admincode);
					break;
				}
			}

		}

		reader1.close();
	}

}
